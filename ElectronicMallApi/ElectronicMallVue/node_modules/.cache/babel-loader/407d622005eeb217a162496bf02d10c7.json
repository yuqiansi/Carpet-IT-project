{"ast":null,"code":"import rules from '../rule/';\nimport { isEmptyValue } from '../util';\n/**\r\n *  Validates a regular expression pattern.\r\n *\r\n *  Performs validation when a rule only contains\r\n *  a pattern property but is not declared as a string type.\r\n *\r\n *  @param rule The validation rule.\r\n *  @param value The value of the field on the source object.\r\n *  @param callback The callback function.\r\n *  @param source The source object being validated.\r\n *  @param options The validation options.\r\n *  @param options.messages The validation messages.\r\n */\n\nfunction pattern(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (!isEmptyValue(value, 'string')) {\n      rules.pattern(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n\nexport default pattern;","map":{"version":3,"sources":["D:/GitHub repository/Carpet-IT-project/ElectronicMallApi/ElectronicMallVue/node_modules/async-validator/es/validator/pattern.js"],"names":["rules","isEmptyValue","pattern","rule","value","callback","source","options","errors","validate","required","hasOwnProperty","field"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgDC,OAAhD,EAAyD;AACvD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAGN,IAAI,CAACO,QAAL,IAAiB,CAACP,IAAI,CAACO,QAAN,IAAkBJ,MAAM,CAACK,cAAP,CAAsBR,IAAI,CAACS,KAA3B,CAAlD;;AACA,MAAIH,QAAJ,EAAc;AACZ,QAAIR,YAAY,CAACG,KAAD,EAAQ,QAAR,CAAZ,IAAiC,CAACD,IAAI,CAACO,QAA3C,EAAqD;AACnD,aAAOL,QAAQ,EAAf;AACD;;AACDL,IAAAA,KAAK,CAACU,QAAN,CAAeP,IAAf,EAAqBC,KAArB,EAA4BE,MAA5B,EAAoCE,MAApC,EAA4CD,OAA5C;;AACA,QAAI,CAACN,YAAY,CAACG,KAAD,EAAQ,QAAR,CAAjB,EAAoC;AAClCJ,MAAAA,KAAK,CAACE,OAAN,CAAcC,IAAd,EAAoBC,KAApB,EAA2BE,MAA3B,EAAmCE,MAAnC,EAA2CD,OAA3C;AACD;AACF;;AACDF,EAAAA,QAAQ,CAACG,MAAD,CAAR;AACD;;AAED,eAAeN,OAAf","sourcesContent":["import rules from '../rule/';\r\nimport { isEmptyValue } from '../util';\r\n\r\n/**\r\n *  Validates a regular expression pattern.\r\n *\r\n *  Performs validation when a rule only contains\r\n *  a pattern property but is not declared as a string type.\r\n *\r\n *  @param rule The validation rule.\r\n *  @param value The value of the field on the source object.\r\n *  @param callback The callback function.\r\n *  @param source The source object being validated.\r\n *  @param options The validation options.\r\n *  @param options.messages The validation messages.\r\n */\r\nfunction pattern(rule, value, callback, source, options) {\r\n  var errors = [];\r\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\r\n  if (validate) {\r\n    if (isEmptyValue(value, 'string') && !rule.required) {\r\n      return callback();\r\n    }\r\n    rules.required(rule, value, source, errors, options);\r\n    if (!isEmptyValue(value, 'string')) {\r\n      rules.pattern(rule, value, source, errors, options);\r\n    }\r\n  }\r\n  callback(errors);\r\n}\r\n\r\nexport default pattern;"]},"metadata":{},"sourceType":"module"}